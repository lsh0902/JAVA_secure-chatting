import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.security.AlgorithmParameters;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.X509EncodedKeySpec;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.security.Key;
import java.security.KeyFactory;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;




public class Client {
	
	//AES
	private static IvParameterSpec iv;
	private Key keySpec;
	final static String key = "201620623leeseunghwan";
	
	public static void main(String[] args) throws Exception {
		
		try {
				Socket c_socket = new Socket("127.0.0.1", 8888);
				//rsa 받아서 aes 암호화
				BufferedReader tmpbuf = new BufferedReader(new InputStreamReader(c_socket.getInputStream()));
				String rsa_public = tmpbuf.readLine();
				System.out.println("Received Public Key : " + rsa_public);
				System.out.println("\nCreating AES Key...");
				Key AES_key = AES256Key(key);

				
				byte[] ivbyte = new byte[16];
				new SecureRandom().nextBytes(ivbyte);
				iv = new IvParameterSpec(ivbyte);
				
				System.out.println("\nAES Key : " + AES_key);
				System.out.println("AES string IV : " + ivbyte.toString());
				System.out.println("AES byte IV : " + ivbyte);
				
				String sendaeskey = RSA_encode(AES_key.toString() , rsa_public);
				System.out.println("\nEncrypted AES Key : " + sendaeskey);
				String sendIV = RSA_encode(byteArrayToHex(ivbyte), rsa_public);
				System.out.println("\nEncrypted IV : " + sendIV);
				
				//aes 키 보내기
				PrintWriter sendWriter = new PrintWriter(c_socket.getOutputStream());		
				sendWriter.println(sendaeskey);
				sendWriter.flush();
				//aes iv 보내기
				sendWriter.println(sendIV);
				sendWriter.flush();
				
				
				ReceiveThread rec_t = new ReceiveThread();
				rec_t.setSocket(c_socket);
				rec_t.setKey(AES_key);
				SendThread sen_t = new SendThread();
				sen_t.setSocket(c_socket);
				sen_t.setKey(AES_key);
				System.out.println("=================Conversation Start==================");
				rec_t.start();
				sen_t.start();
				rec_t.join();
				sen_t.End();
				
				c_socket.close();
		}
		catch(IOException e) {
				e.printStackTrace();
			}
		 
	}
	public static String byteArrayToHex(byte[] ba) {

        if (ba == null || ba.length == 0) {

            return null;

        }

        StringBuffer sb = new StringBuffer(ba.length * 2);

        String hexNumber;

        for (int x = 0; x < ba.length; x++) {

            hexNumber = "0" + Integer.toHexString(0xff & ba[x]);

            sb.append(hexNumber.substring(hexNumber.length() - 2));

        }

        return sb.toString();

    }

	public static byte[] hexToByteArray(String hex) {

        if (hex == null || hex.length() == 0) {

            return null;

        }

        byte[] ba = new byte[hex.length() / 2];

        for (int i = 0; i < ba.length; i++) {

            ba[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);

        }

        return ba;

    }


	public static String RSA_encode(String plainData, String stringPublicKey) {
		String enc = null;
		try {
			//전달 받은 공개키를 공개키 객체로 만ㄷ름.
			byte[] bytePublickey = Base64.getDecoder().decode(stringPublicKey.getBytes());
			X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(bytePublickey);
			KeyFactory keyfac = KeyFactory.getInstance("RSA");
			PublicKey pub = keyfac.generatePublic(publicKeySpec);
			
			//만들어진 공개키 객체를 기반으로 암호화모드로 설정
			Cipher cipher = Cipher.getInstance("RSA");
			cipher.init(Cipher.ENCRYPT_MODE, pub);
			
			//평문 암호화 여기선 aes 키를 암호화
			byte[] byteEnc = cipher.doFinal(plainData.getBytes());
			enc = Base64.getEncoder().encodeToString(byteEnc);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		return enc;
	}
	
	
public static Key AES256Key(String key) throws UnsupportedEncodingException{
		byte[] keyBytes = new byte[16];
		byte[] b = key.getBytes("UTF-8");
		int len = b.length;
		if(len > keyBytes.length) len = keyBytes.length;
		
		System.arraycopy(b,0,keyBytes,0,len);
		SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
		
		return keySpec;
	}
public static String AES_encrypt(String msg, String key,IvParameterSpec iv) throws Exception {
	SecureRandom random = new SecureRandom();
	byte b[] = new byte[20];
	random.nextBytes(b);
	byte[] saltBytes = b;
	
	SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
	PBEKeySpec spec = new PBEKeySpec(key.toCharArray(), saltBytes, 70000, 256);
	SecretKey secretKey = factory.generateSecret(spec);
	SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), "AES");
	
	//padding
	Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	cipher.init(Cipher.ENCRYPT_MODE, secret, iv);
	AlgorithmParameters params = cipher.getParameters();
	
	byte[] ivBytes = iv.getIV();
	byte[] encTextBytes = cipher.doFinal(msg.getBytes("UTF-8"));
	byte[] buffer = new byte[saltBytes.length + ivBytes.length + encTextBytes.length];
	
	System.arraycopy(saltBytes, 0, buffer, 0, saltBytes.length);
	System.arraycopy(ivBytes, 0, buffer, saltBytes.length, ivBytes.length);
	System.arraycopy(encTextBytes, 0, buffer, saltBytes.length + ivBytes.length, encTextBytes.length);
	
	return Base64.getEncoder().encodeToString(buffer);
}

public static String AES_decrypt(String msg, String key, IvParameterSpec iv) throws Exception {
	Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	ByteBuffer buffer = ByteBuffer.wrap(Base64.getDecoder().decode(msg));
	
	byte[] saltBytes = new byte[20];
	buffer.get(saltBytes, 0, saltBytes.length);
	byte[] ivBytes = new byte[cipher.getBlockSize()];
	buffer.get(ivBytes,0,ivBytes.length);
	byte[] encTextBytes = new byte[buffer.capacity() - saltBytes.length - ivBytes.length];
	buffer.get(encTextBytes);
	
	SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
	PBEKeySpec spec = new PBEKeySpec(key.toCharArray(), saltBytes, 70000, 256);
	
	SecretKey secretkey = factory.generateSecret(spec);
	SecretKeySpec secret = new SecretKeySpec(secretkey.getEncoded(), "AES");
	
	cipher.init(Cipher.DECRYPT_MODE,  secret, new IvParameterSpec(ivBytes));
	
	byte[] decTextBytes = cipher.doFinal(encTextBytes);
	return new String(decTextBytes);
}
	
	static class SendThread extends Thread{
		private Socket m_Socket;
		private Key AES_key;
		int c = 0;
		public void run() {
			super.run();
			try {
				BufferedReader tmpbuf = new BufferedReader(new InputStreamReader(System.in));
				PrintWriter sendWriter = new PrintWriter(m_Socket.getOutputStream());
				String origin_message;
				SimpleDateFormat form = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				
				while(true) { 
		
					try {
						if(c == 0) {
							origin_message = tmpbuf.readLine();
							String message = AES_encrypt(origin_message, AES_key.toString(), iv);
							
							sendWriter.println(message);
							sendWriter.flush();
							sendWriter.println(form.format(new Date()));
							sendWriter.flush();
							
							if(origin_message.contentEquals("exit")) {
								System.out.println("Connection Closed");
								return;
							}
						}
						if(c == 1) return;
					} 
					catch (Exception e) {
						System.out.println("send error");
						e.printStackTrace();
						break;
					}
				}
				System.out.println("From send, sendWriter tmpbuf m_socket close");
				sendWriter.close();
				tmpbuf.close();
//				m_Socket.close();
			}
			catch(IOException e) {
				System.out.println("send thread io error");
			}
			return ;
		}
		public void End() {
			c = 1;
		}
		public void setSocket(Socket soc) {
			m_Socket = soc;
		}
		public void setKey(Key aes) {
			AES_key = aes;
		}
	}
	
	static class ReceiveThread extends Thread{
		private Socket m_Socket;
		private Key AES_key;
		public void run() {
			super.run();
			
			try {
				BufferedReader tmpbuf = new BufferedReader(new InputStreamReader(m_Socket.getInputStream()));
				PrintWriter sendWriter = new PrintWriter(new OutputStreamWriter(m_Socket.getOutputStream()));
				SimpleDateFormat form = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				while(true) {
					try {
						String enc_received = tmpbuf.readLine();
						String timestamp = tmpbuf.readLine();
						
						String receiveMessage = AES_decrypt(enc_received, AES_key.toString(), iv);
						
						if(receiveMessage.contentEquals("exit")) {
							System.out.println("\nReceived Message : "+receiveMessage + " [" +timestamp + "]");
							System.out.println("Encrypted Message : " + enc_received);
							System.out.println("Chatting Process terminated .. Press Enter");
							
							sendWriter.println(AES_encrypt("exit",AES_key.toString(), iv));
							sendWriter.flush();
							sendWriter.println(form.format(new Date()));
							sendWriter.flush();
							break;
						}
						else {
							System.out.println("\nReceived Message : "+receiveMessage + " [" +timestamp + "]");
							System.out.println("Encrypted Message : " + enc_received);
							System.out.println();
						}
					} 
					catch (Exception e) {
						e.printStackTrace();
						break;
					}
				}
				tmpbuf.close();
				m_Socket.close();
			}
			catch(IOException e) {
				System.out.println("receive thread IO error");
			}
		}
		
		public void setSocket(Socket soc) {
			m_Socket = soc;
		}
		public void setKey(Key aes) {
			AES_key = aes;
		}
	}
}
