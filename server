//chat library
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
//rsa library
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;

public class Server {
	
	static final int RSA_SIZE= 2048;
	
	public static void main(String[] args) throws Exception {
		
		try {
			ServerSocket s_socket = new ServerSocket(8888);
			Socket c_socket = s_socket.accept();
			//RSA 생성.
			System.out.println("Creating RSA key pair...\n");
			HashMap<String, String> rsaKeypair = createKeypairAsString();
			String public_RSA = rsaKeypair.get("publicKey");
			String private_RSA = rsaKeypair.get("privateKey");
			System.out.println("public key : " + public_RSA);
			System.out.println("\nprivate key : " + private_RSA);
			//rsa public 보내고
			PrintWriter sendWriter = new PrintWriter(c_socket.getOutputStream());
			sendWriter.println(public_RSA);
			sendWriter.flush();
			
			//rsa private로 암호화된 aes 키 받고
			BufferedReader tmpbuf = new BufferedReader(new InputStreamReader(c_socket.getInputStream()));
			String received_AES = tmpbuf.readLine();
			System.out.println("\nReceived AES Key : " + received_AES);
			String AES_key = RSA_decode(received_AES, private_RSA);
			System.out.println("\nDecoded AES Key : " + AES_key);
			
			ReceiveThread rec_t = new ReceiveThread();
			rec_t.setSocket(c_socket);	
			rec_t.setKey(AES_key.toString());
			SendThread sen_t = new SendThread();
			sen_t.setSocket(c_socket);
			sen_t.setKey(AES_key.toString());
			
			System.out.println("==========Conversation Start=============");
			rec_t.start();
			sen_t.start();
		}
		catch(IOException e) {
			e.printStackTrace();
		}
	}
	//rsa 키 생성
	static HashMap<String, String> createKeypairAsString(){
		HashMap<String, String> stringKeypair = new HashMap<>();
		
		try {
			SecureRandom secureRandom = new SecureRandom();
			KeyPairGenerator keypg = KeyPairGenerator.getInstance("RSA");
			keypg.initialize(RSA_SIZE, secureRandom);
			KeyPair keypair = keypg.genKeyPair();
			
			PublicKey public_key = keypair.getPublic();
			PrivateKey private_key = keypair.getPrivate();
			
			String string_pub = Base64.getEncoder().encodeToString(public_key.getEncoded());
			String string_pri = Base64.getEncoder().encodeToString(private_key.getEncoded());
			
			stringKeypair.put("publicKey", string_pub);
			stringKeypair.put("privateKey", string_pri);
		}
		
		catch (Exception e) {
			e.printStackTrace();
		}	
		return stringKeypair;
	}
	//rsa Encryp
	static String RSA_encode(String plainData, String stringPublicKey) {
		String enc = null;
		try {
			//전달 받은 공개키를 공개키 객체로 만ㄷ름.
			KeyFactory keyfac = KeyFactory.getInstance("RSA");
			byte[] bytePublickey = Base64.getDecoder().decode(stringPublicKey.getBytes());
			X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(bytePublickey);
			PublicKey pub = keyfac.generatePublic(publicKeySpec);
			
			//만들어진 공개키 객체를 기반으로 암호화모드로 설정
			Cipher cipher = Cipher.getInstance("RSA");
			cipher.init(Cipher.ENCRYPT_MODE, pub);
			
			//평문 암호화 여기선 aes 키를 암호화
			byte[] byteEnc = cipher.doFinal(plainData.getBytes());
			enc = Base64.getEncoder().encodeToString(byteEnc);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		return enc;
	}
	//RSA decrypt
	static String RSA_decode(String encryptedData, String stringPrivateKey) {
		String dec = null;
		try {
			//전달받은 개인키 개인키 객체로 만듦
			KeyFactory keyfac = KeyFactory.getInstance("RSA");
			byte[] bytePrivateKey = Base64.getDecoder().decode(stringPrivateKey.getBytes());
			PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(bytePrivateKey);
			PrivateKey pri_key = keyfac.generatePrivate(privateKeySpec);
			
			//개인키 객체를 기반으로 암호화 모드 설정
			Cipher cipher = Cipher.getInstance("RSA");
			cipher.init(Cipher.DECRYPT_MODE, pri_key);
			
			//복호화
			byte[] byteEnc = Base64.getDecoder().decode(encryptedData.getBytes());
			byte[] byteDec = cipher.doFinal(byteEnc);
			dec = new String(byteDec);
		}
		catch(Exception e) {
			e.printStackTrace();
		}		
		
		return dec;
	}
	
	public static String AES_encrypt(String msg, String key) throws Exception {
		SecureRandom random = new SecureRandom();
		byte b[] = new byte[20];
		random.nextBytes(b);
		byte[] saltBytes = b;
		
		SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
		PBEKeySpec spec = new PBEKeySpec(key.toCharArray(), saltBytes, 70000, 256);
		
		SecretKey secretKey = factory.generateSecret(spec);
		SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), "AES");
		
		//padding
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.ENCRYPT_MODE, secret);
		AlgorithmParameters params = cipher.getParameters();
		
		byte[] ivBytes = params.getParameterSpec(IvParameterSpec.class).getIV();
		
		byte[] encTextBytes = cipher.doFinal(msg.getBytes("UTF-8"));
		
		byte[] buffer = new byte[saltBytes.length + ivBytes.length + encTextBytes.length];
		System.arraycopy(saltBytes, 0, buffer, 0, saltBytes.length);
		System.arraycopy(ivBytes, 0, buffer, saltBytes.length, ivBytes.length);
		System.arraycopy(encTextBytes, 0, buffer, saltBytes.length + ivBytes.length, encTextBytes.length);
		
		return Base64.getEncoder().encodeToString(buffer);
	}
	
	public static String AES_decrypt(String msg, String key ) throws Exception {
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		ByteBuffer buffer = ByteBuffer.wrap(Base64.getDecoder().decode(msg));
		
		byte[] saltBytes = new byte[20];
		buffer.get(saltBytes, 0, saltBytes.length);
		byte[] ivBytes = new byte[cipher.getBlockSize()];
		buffer.get(ivBytes,0,ivBytes.length);
		byte[] encTextBytes = new byte[buffer.capacity() - saltBytes.length - ivBytes.length];
		buffer.get(encTextBytes);
		
		SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
		PBEKeySpec spec = new PBEKeySpec(key.toCharArray(), saltBytes, 70000, 256);
		
		SecretKey secretkey = factory.generateSecret(spec);
		SecretKeySpec secret = new SecretKeySpec(secretkey.getEncoded(), "AES");
		
		cipher.init(Cipher.DECRYPT_MODE,  secret, new IvParameterSpec(ivBytes));
		
		byte[] decTextBytes = cipher.doFinal(encTextBytes);
		return new String(decTextBytes);
	}

	static class SendThread extends Thread{
		private Socket m_Socket;
		private String AES_key;
		
		public void run() {
			super.run();
			try {
				BufferedReader tmpbuf = new BufferedReader(new InputStreamReader(System.in));
				PrintWriter sendWriter = new PrintWriter(m_Socket.getOutputStream());
				SimpleDateFormat form = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String origin_message;
				
				while(true) {
					System.out.println("send working");
					try {
						origin_message = tmpbuf.readLine();
						String message = AES_encrypt(origin_message, AES_key.toString());
						
						sendWriter.println(message);
						sendWriter.flush();
						sendWriter.println(form.format(new Date()));
						sendWriter.flush();
						
						if(origin_message.contentEquals("exit")) 
							return ;
					} 
					catch (Exception e) {
						e.printStackTrace();
						break;
					}
				}
				System.out.println("From send, sendWriter tmpbuf m_socket close");
				sendWriter.close();
				tmpbuf.close();
//				m_Socket.close();
			}
			catch(IOException e) {
				System.out.println("send thread io error");
			}
			return ;
		}
		public void setSocket(Socket soc) {
			m_Socket = soc;
		}
		public void setKey(String aes) {
			AES_key = aes;
		}
	}
	
	static class ReceiveThread extends Thread{
		private Socket m_Socket;
		private String AES_key;
		public void run() {
			super.run();
			
			try {
				
				BufferedReader tmpbuf = new BufferedReader(new InputStreamReader(m_Socket.getInputStream()));
				PrintWriter sendWriter = new PrintWriter(new OutputStreamWriter(m_Socket.getOutputStream()));
				SimpleDateFormat form = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				while(true) {
					try {
						String enc_received = tmpbuf.readLine();
						String timestamp = tmpbuf.readLine();
						
						String receiveMessage = AES_decrypt(enc_received, AES_key.toString());
						
						if(receiveMessage.contentEquals("exit")) {
							System.out.println("Received Message : "+receiveMessage + " [" +timestamp + "]");
							System.out.println("Encrypted Message : " + enc_received);
							System.out.println("Connection Closed");

							sendWriter.println(AES_encrypt("exit",AES_key.toString()));
							sendWriter.flush();
							sendWriter.println(form.format(new Date()));
							sendWriter.flush();
							break;
						}
						else {
							System.out.println("Received Message : "+receiveMessage + " [" +timestamp + "]");
							System.out.println("Encrypted Message : " + enc_received);
							System.out.print("Your Message : ");
						}
					}
					catch (Exception e) {
						e.printStackTrace();
						break;
					}
				}
				tmpbuf.close();
			}
			catch(IOException e) {
				System.out.println("receive thread IO error");
			}
			System.out.println("recv end");
		}
		
		public void setSocket(Socket soc) {
			m_Socket = soc;
		}
		public void setKey(String aes) {
			AES_key = aes;
		}
	}
}

